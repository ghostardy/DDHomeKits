package family.dd.member;

/**
 * Define user privileges
 * Use bit position of a {@link long} value to identify user authorities
 */
public enum Privilege {
    LOG_IN(1, "Log in"),
    USER_MANAGE(2, "Manage Roles and Members"),
    METER_VIEW(3,"View history data and analysis of meters"),
    METER_REPORT(4, "Read meters and upload numbers");

    /**
     * value scope 1~32
     */
    private int bitPosition;
    private String description;

    Privilege(int bitPosition, String description){
        this.bitPosition = bitPosition;
        this.description = description;
    }
    /**
     * Returns authority in {@link long} value.
     *
     * @param privileges some privilege
     *
     * @return a {@link long} value with specified bit position, 0L if no privilege is passed.
     */
    public static long toLongValue(Privilege...privileges){
        long authority = 0L;
        if (null == privileges) {
            return authority;
        }
        for (Privilege privilege : privileges) {
            authority = authority|(1<<(privilege.bitPosition-1));
        }
        return authority;
    }

    /**
     * @param privilege defined in {@link Privilege}
     * @param authority {@link long} value generated by {@link #toLongValue(Privilege...)}
     * @return {@code true} if hasPermission
     * @throws IllegalArgumentException
     */
    public static boolean hasPermission(Privilege privilege, long authority) throws IllegalArgumentException{
        if (0 == (1<<(privilege.bitPosition-1) & authority)) {
            return false;
        }else {
            return true;
        }
    }

    public static void main(String args[]){
        try {
            System.out.println(Privilege.toLongValue());
            System.out.println(Privilege.toLongValue(LOG_IN));
            System.out.println(Privilege.toLongValue(LOG_IN,USER_MANAGE));
            System.out.println(Privilege.toLongValue(LOG_IN,USER_MANAGE,METER_VIEW));
            System.out.println(Privilege.toLongValue(LOG_IN,USER_MANAGE,METER_REPORT,METER_VIEW));

            System.out.println(Privilege.hasPermission(LOG_IN, 1));
            System.out.println(Privilege.hasPermission(LOG_IN, 2));
            System.out.println(Privilege.hasPermission(LOG_IN, 7));
            System.out.println(Privilege.hasPermission(LOG_IN, 127));

        }catch(Exception e){
            e.printStackTrace();
        }
    }
}
