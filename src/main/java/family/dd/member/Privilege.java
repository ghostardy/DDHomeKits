package family.dd.member;

/**
 * Define user privileges
 * Use bit position of a {@link long} value to identify user authorities
 */
public enum Privilege {
    LOG_IN(1, "Log in"),
    USER_MANAGE(2, "Manage Roles and Members"),
    METER_VIEW(3,"View data collected by meters"),
    METER_REPORT(4, "Upload meter numbers"),
    SYSTEM_ADMIN(30, "Manage system"),
    EXTENSION(31, "Reserved field for extension");

    /**
     *  Value scope 1~31
     */
    private int bitPosition;
    private String description;

    Privilege(int bitPosition, String description){
        this.bitPosition = bitPosition;
        this.description = description;
    }
    /**
     * Returns authority in {@link long} value.
     *
     * @param privileges some privilege
     *
     * @return a {@link long} value with specified bit position, 0L if no privilege is passed.
     */
    public static long toLongValue(Privilege...privileges){
        long authority = 0L;
        if (null == privileges) {
            return authority;
        }
        for (Privilege privilege : privileges) {
            authority = authority|(1<<(privilege.bitPosition-1));
        }
        return authority;
    }

    /**
     * @param privilege defined in {@link Privilege}
     * @param authority {@link long} value generated by {@link #toLongValue(Privilege...)}
     * @return {@code true} if hasPermission
     */
    public static boolean hasPermission(Privilege privilege, long authority){
        return 0 != (1 << (privilege.bitPosition - 1) & authority);
    }
}
